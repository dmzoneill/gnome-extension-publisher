name: Update Gnome Extension

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  run-lint:
    runs-on: ubuntu-latest
    name: Run linter
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-gnome-extension-publisher:
    if: >-
      github.event_name == 'push' || 
      github.event.pull_request.merged == true
    name: Build publisher
#    needs: run-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

#     - uses: dorny/paths-filter@v2
#       id: changes
#       with:
#         filters: |
#           src:
#             - 'gnome-extension-publisher/**'
#             - '*.py' 
#             - '*.toml'
      - name: Build
#        if: steps.changes.outputs.src == 'true'
        run: |-
          export PUBVER=$(grep version pyproject.toml | awk -F'"' '{print $2}')
          pip3 install trove-classifiers ptyprocess msgpack lockfile distlib tomlkit tomli shellingham rapidfuzz pyrsistent poetry-core platformdirs pkginfo pexpect packaging jeepney jaraco.classes filelock dulwich crashtest cachecontrol virtualenv SecretStorage jsonschema cleo keyring poetry-plugin-export poetry
          python3 -m pip install --upgrade build
          python3 -m pip install --upgrade twine
          python3 -m build
          ls -liaR .
          mv ./dist/gnome-extension-publisher-$PUBVER.tar.gz ./dist/gnome-extension-publisher-${{ github.sha }}.tar.gz
          mv ./dist/gnome-extension-publisher-$PUBVER-py3-none-any.whl ./dist/gnome-extension-publisher-${{ github.sha }}.whl
      - name: Archive gnome-extension-publisher whl artifact
#        if: steps.changes.outputs.src == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: gnome-extension-publisher-${{ github.sha }}.whl
          path: dist/gnome-extension-publisher-${{ github.sha }}.whl 
      - name: Archive gnome-extension-publisher tar artifact
#        if: steps.changes.outputs.src == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: gnome-extension-publisher-${{ github.sha }}.tar.gz
          path: dist/gnome-extension-publisher-${{ github.sha }}.tar.gz
  upload-extension:
    if: >-
      github.event_name == 'push' || 
      github.event.pull_request.merged == true
    name: Upload extension
    runs-on: ubuntu-latest
    needs: build-gnome-extension-publisher
    steps:
      - name: Download tar artifact
        uses: actions/download-artifact@v3
        with:
          name: gnome-extension-publisher-${{ github.sha }}.tar.gz
      - name: Download whl artifact
        uses: actions/download-artifact@v3
        with:
          name: gnome-extension-publisher-${{ github.sha }}.whl
      - name: Install webstore cli
        run: |-
          pip install gnome-extension-publisher
      - name: Upload step
        run: |-
          # shellcheck disable=SC2035
          mkdir dist
          # shellcheck disable=SC2035
          mv *.tar.gz dist/
          # shellcheck disable=SC2035
          mv *.whl dist/
          # shellcheck disable=SC2035
          printf "[pypi]\nusername = __token__\npassword = ${{ secrets.PYPI_TOKEN }}" > ~/.pypirc
          # shellcheck disable=SC2035
          python3 -m pip install --upgrade twine 
          # shellcheck disable=SC2035
          python3 -m twine upload --repository pypi dist/*
